// English Language File for QpiSQL Plugin
<!-- language file start -->

// General informations about the plugin
assSQLQuestion#:#Interactive SQL Question
question_edit_info#:#This question type makes it possible to interactively check the SQL skills of participants. The examinees are given the opportunity to execute their SQL queries directly in the browser on the basis of SQL.js and thus receive direct feedback on the functionality of their written queries. The levies are assessed fully automatically based on various metrics on the output relation.

// Used in the sequence area
sequences_info#:#SQL Sequences
sequences_info_text#:#An interactive SQL query consists of three sequences SQL besides the usual components title, author, description, question and working time. These sequences - called A, B and C - are executed sequentially each time they pass through SQL.js. The sequences A and C are specified by the questioner, while the sequence B must be developed by the candidate. The basis for the evaluation of inquiries is the last output relation that occurs in the entire execution. This essentially allows two types of questions:<br /><br /><dl><dt> Question on a SELECT statement </dt><dd>The questioner uses sequence A to populate the question database with content. For example, he creates relations and fills them with tuples. In Sequence B, the examinee is asked to write a SELECT statement. Sequence C would remain empty in this case. By this the output from the written SELECT query would form the basis of the evaluation.</dd><br /><dt> Question on CREATE TABLE, INSERT INTO, DELETE FROM, UPDATE, usw. </dt><dd>Also in this case sequence A can be used to prepare the database for the question. The difference of this type of question is that the candidate in sequence B just should not write a SELECT request and therefore there is no verifiable output relation. This output relation can be generated by the examiner in sequence C, whereby the changes to the database can be checked perfectly.</dd><br /><br />Especially in the case of the first question type, it may make sense to ban changes to the database in sequence B. If this is desired, activate the integrity check. In this case, after the execution of sequence A, a hash of the database is calculated, which is then compared with a second hash of the database before sequence C. If the two hash values are not identical, an error is output and sequence B is declared invalid.
sequences_info_error#:#To create a question, sequence B is not allowed to be empty.
sequence_a#:#Sequence A:
sequence_b#:#Sequence B:
sequence_c#:#Sequence C:
integrity_check#:#Integrity Check:

// Used in the output area
output_info#:#Output
output_info_text#:#In order to be able to evaluate results on the basis of an output relation, comparison values are required. For this reason, it is imperative that the model solution is executed at least once before storing the question. Any change to the above sequences automatically causes a new execution to be necessary. Of course, the above sequences should not contain any errors.
output_info_error#:#A execution of the latest code has to be done before saving the question. It is not allowed to contain errors.

// Error or status messages used in the output area
status_execution_running#:#The SQL request(s) are in progress. Please wait ...
error_no_execution#:#Please start the execution to get a result displayed. After each change of the SQL code a re-execution must take place.
error_db_creation#:#An error occurred while creating the database:
error_integrity_check#:#Unauthorized changes to the database were detected. If you are the creator of the question, it might help to disable the integrity check.
error_no_visible_result#:#The requests do not provide a visible result. Is there a SELECT request?
error_running_sequence#:#Error while executing the SQL code:

// Used in the scoring area
scoring_info#:#Scoring
scoring_info_text#:#In order to enable an automatic evaluation of the answers, different metrics are used. The metrics are calculated over the output relation generated by the questioner and the output relation of the candidate and then compared with each other. The weighting of these individual values - in the form of points - is again the responsibility of the questioner.
scoring_info_error#:#The total possible score must be higher than 0.
points#:#Points
warning_no_execution#:#To see the value of the scoring metric in your relation, please start an execution
scoring_metric_output_text#:#The value of the scoring metric in your relation:

// Used in the scoring metric: Result lines
scoring_metric_result_lines_info#:#<b>Number of Tuples</b><br />One of the simplest metrics that can be used to evaluate queries is the number of tuples in the result. If the result of the examinee has the same number of tuples as the example solution, he will receive all points awarded for this metric. If his number of result tuples is different, then he does not get any points for this metric.
